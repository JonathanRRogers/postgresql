diff -up postgresql-9.2.5/postgresql.init.scl-env-check postgresql-9.2.5/postgresql.init
--- postgresql-9.2.5/postgresql.init.scl-env-check	2013-11-19 12:42:26.048411399 +0100
+++ postgresql-9.2.5/postgresql.init	2013-11-19 14:58:43.754964960 +0100
@@ -1,6 +1,6 @@
 #!/bin/sh
 #
-# postgresql	This is the init script for starting up the PostgreSQL
+# __SCL_NAME__-postgresql	This is the init script for starting up the PostgreSQL
 #		server.
 #
 # This script is slightly unusual in that the name of the daemon (postmaster)
@@ -11,7 +11,7 @@
 # processname: postmaster
 # pidfile: /var/run/postmaster.PORT.pid
 ### BEGIN INIT INFO
-# Provides: postgresql
+# Provides: __SCL_NAME__-postgresql
 # Required-Start: $local_fs $remote_fs $network $named $syslog $time
 # Required-Stop: $local_fs $remote_fs $network $named $syslog $time
 # Short-Description: start and stop PostgreSQL server
@@ -99,7 +99,7 @@ start(){
 		then
 			echo
 			echo $"An old version of the database format was found."
-			echo $"Use \"service postgresql upgrade\" to upgrade to version $PGMAJORVERSION."
+			echo $"Use \"service __SCL_NAME__-postgresql upgrade\" to upgrade to version $PGMAJORVERSION."
 			echo $"See $PGDOCDIR/README.rpm-dist for more information."
 			exit 1
 		else
@@ -112,7 +112,7 @@ start(){
 	else
 		# No existing PGDATA! Warn the user to initdb it.
 		echo
-                echo $"$PGDATA is missing. Use \"service postgresql initdb\" to initialize the cluster first."
+                echo $"$PGDATA is missing. Use \"service __SCL_NAME__-postgresql initdb\" to initialize the cluster first."
 		echo_failure
 		echo
 		exit 1
@@ -120,7 +120,11 @@ start(){
 
 	echo -n "$PSQL_START"
 	test x"$PG_OOM_ADJ" != x && echo "$PG_OOM_ADJ" > /proc/self/oom_adj
-	$SU -l postgres -c "$PGENGINE/postmaster -p '$PGPORT' -D '$PGDATA' ${PGOPTS} &" >> "$PGLOG" 2>&1 < /dev/null
+	# $SU doesn't preserve environment variables, so we need to restore whole SCL environment
+	$SU -l postgres -c "\
+		source __SCL_SCRIPTS__/service-environment ; \
+		source scl_source enable \$POSTGRESQL92_SCLS_ENABLED ; \
+		$PGENGINE/postmaster -p '$PGPORT' -D '$PGDATA' ${PGOPTS} &" >> "$PGLOG" 2>&1 < /dev/null
 	sleep 2
 	pid=`head -n 1 "$PGDATA/postmaster.pid" 2>/dev/null`
 	if [ "x$pid" != x ]
@@ -140,7 +144,11 @@ stop(){
 	echo -n $"Stopping ${NAME} service: "
 	if [ -e "$lockfile" ]
 	then
-	    $SU -l postgres -c "$PGENGINE/pg_ctl stop -D '$PGDATA' -s -m fast" > /dev/null 2>&1 < /dev/null
+	    # $SU doesn't preserve environment variables, so we need to restore whole SCL environment
+	    $SU -l postgres -c "\
+		source __SCL_SCRIPTS__/service-environment ; \
+		source scl_source enable \$POSTGRESQL92_SCLS_ENABLED ; \
+		$PGENGINE/pg_ctl stop -D '$PGDATA' -s -m fast" > /dev/null 2>&1 < /dev/null
 	    ret=$? 
 	    if [ $ret -eq 0 ]
 	    then
@@ -168,7 +176,11 @@ condrestart(){
 }
 
 reload(){
-    $SU -l postgres -c "$PGENGINE/pg_ctl reload -D '$PGDATA' -s" > /dev/null 2>&1 < /dev/null
+    # $SU doesn't preserve environment variables, so we need to restore whole SCL environment
+    $SU -l postgres -c " \
+		source __SCL_SCRIPTS__/service-environment ; \
+		source scl_source enable \$POSTGRESQL92_SCLS_ENABLED ; \
+		$PGENGINE/pg_ctl reload -D '$PGDATA' -s" > /dev/null 2>&1 < /dev/null
 }
 
 # code shared between initdb and upgrade actions
@@ -192,7 +204,11 @@ perform_initdb(){
 	fi
 
 	# Initialize the database
-	$SU -l postgres -c "$PGENGINE/initdb --pgdata='$PGDATA' --auth='ident'" >> "$PGLOG" 2>&1 < /dev/null
+	# $SU doesn't preserve environment variables, so we need to restore whole SCL environment
+	$SU -l postgres -c "\
+		source __SCL_SCRIPTS__/service-environment ; \
+		source scl_source enable \$POSTGRESQL92_SCLS_ENABLED ; \
+		$PGENGINE/initdb --pgdata='$PGDATA' --auth='ident'" >> "$PGLOG" 2>&1 < /dev/null
 
 	# Create directory for postmaster log
 	mkdir "$PGDATA/pg_log"
@@ -240,7 +256,7 @@ upgrade(){
     if [ ! -x "$PGENGINE/pg_upgrade" ]
     then
 	echo
-	echo $"Please install the postgresql-upgrade RPM."
+	echo $"Please install the __SCL_NAME__-postgresql-upgrade RPM."
 	echo_failure
 	echo
 	exit 5
@@ -267,14 +283,18 @@ upgrade(){
     if perform_initdb
     then
 	# Do the upgrade
-	$SU -l postgres -c "$PGENGINE/pg_upgrade \
-		'--old-bindir=$PREVPGENGINE' \
-		'--new-bindir=$PGENGINE' \
-		'--old-datadir=$PGDATAOLD' \
-		'--new-datadir=$PGDATA' \
-		--link \
-		'--old-port=$PGPORT' '--new-port=$PGPORT' \
-		--user=postgres" >> "$PGUPLOG" 2>&1 < /dev/null
+	# $SU doesn't preserve environment variables, so we need to restore whole SCL environment
+	$SU -l postgres -c "\
+		source __SCL_SCRIPTS__/service-environment ; \
+		source scl_source enable \$POSTGRESQL92_SCLS_ENABLED ; \
+		$PGENGINE/pg_upgrade \
+			'--old-bindir=$PREVPGENGINE' \
+			'--new-bindir=$PGENGINE' \
+			'--old-datadir=$PGDATAOLD' \
+			'--new-datadir=$PGDATA' \
+			--link \
+			'--old-port=$PGPORT' '--new-port=$PGPORT' \
+			--user=postgres" >> "$PGUPLOG" 2>&1 < /dev/null
 	if [ $? -ne 0 ]
 	then
 	    # pg_upgrade failed
@@ -299,6 +319,19 @@ upgrade(){
     echo $"See $PGUPLOG for details."
 }
 
+# We have to re-enable SCL environment, because /sbin/service
+# clears almost all environment variables.
+# Since X_SCLS is cleared as well, we lose information about other
+# collections enabled.
+source __SCL_SCRIPTS__/service-environment
+source scl_source enable $POSTGRESQL92_SCLS_ENABLED
+
+# we want start daemon only inside "scl enable" invocation
+if ! scl_enabled __SCL_NAME__ ; then
+    echo "Collection __SCL_NAME__ has to be listed in __SCL_SCRIPTS__/service-environment"
+    exit 1
+fi
+
 # See how we were called.
 case "$1" in
   start)
